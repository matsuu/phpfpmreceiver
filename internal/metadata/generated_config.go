// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"go.opentelemetry.io/collector/confmap"
	"go.opentelemetry.io/collector/filter"
)

// MetricConfig provides common config for a particular metric.
type MetricConfig struct {
	Enabled bool `mapstructure:"enabled"`

	enabledSetByUser bool
}

func (ms *MetricConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(ms)
	if err != nil {
		return err
	}
	ms.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// MetricsConfig provides config for phpfpm metrics.
type MetricsConfig struct {
	PhpfpmAcceptedConnections      MetricConfig `mapstructure:"phpfpm.accepted_connections"`
	PhpfpmActiveProcesses          MetricConfig `mapstructure:"phpfpm.active_processes"`
	PhpfpmIdleProcesses            MetricConfig `mapstructure:"phpfpm.idle_processes"`
	PhpfpmListenQueue              MetricConfig `mapstructure:"phpfpm.listen_queue"`
	PhpfpmListenQueueLength        MetricConfig `mapstructure:"phpfpm.listen_queue_length"`
	PhpfpmMaxActiveProcesses       MetricConfig `mapstructure:"phpfpm.max_active_processes"`
	PhpfpmMaxChildrenReached       MetricConfig `mapstructure:"phpfpm.max_children_reached"`
	PhpfpmMaxListenQueue           MetricConfig `mapstructure:"phpfpm.max_listen_queue"`
	PhpfpmProcessLastRequestCPU    MetricConfig `mapstructure:"phpfpm.process.last_request_cpu"`
	PhpfpmProcessLastRequestMemory MetricConfig `mapstructure:"phpfpm.process.last_request_memory"`
	PhpfpmProcessRequestDuration   MetricConfig `mapstructure:"phpfpm.process.request_duration"`
	PhpfpmProcessRequests          MetricConfig `mapstructure:"phpfpm.process.requests"`
	PhpfpmProcessState             MetricConfig `mapstructure:"phpfpm.process.state"`
	PhpfpmScrapeFailures           MetricConfig `mapstructure:"phpfpm.scrape_failures"`
	PhpfpmSlowRequests             MetricConfig `mapstructure:"phpfpm.slow_requests"`
	PhpfpmStartSince               MetricConfig `mapstructure:"phpfpm.start_since"`
	PhpfpmTotalProcesses           MetricConfig `mapstructure:"phpfpm.total_processes"`
}

func DefaultMetricsConfig() MetricsConfig {
	return MetricsConfig{
		PhpfpmAcceptedConnections: MetricConfig{
			Enabled: true,
		},
		PhpfpmActiveProcesses: MetricConfig{
			Enabled: true,
		},
		PhpfpmIdleProcesses: MetricConfig{
			Enabled: true,
		},
		PhpfpmListenQueue: MetricConfig{
			Enabled: true,
		},
		PhpfpmListenQueueLength: MetricConfig{
			Enabled: true,
		},
		PhpfpmMaxActiveProcesses: MetricConfig{
			Enabled: true,
		},
		PhpfpmMaxChildrenReached: MetricConfig{
			Enabled: true,
		},
		PhpfpmMaxListenQueue: MetricConfig{
			Enabled: true,
		},
		PhpfpmProcessLastRequestCPU: MetricConfig{
			Enabled: true,
		},
		PhpfpmProcessLastRequestMemory: MetricConfig{
			Enabled: true,
		},
		PhpfpmProcessRequestDuration: MetricConfig{
			Enabled: true,
		},
		PhpfpmProcessRequests: MetricConfig{
			Enabled: true,
		},
		PhpfpmProcessState: MetricConfig{
			Enabled: true,
		},
		PhpfpmScrapeFailures: MetricConfig{
			Enabled: true,
		},
		PhpfpmSlowRequests: MetricConfig{
			Enabled: true,
		},
		PhpfpmStartSince: MetricConfig{
			Enabled: true,
		},
		PhpfpmTotalProcesses: MetricConfig{
			Enabled: true,
		},
	}
}

// ResourceAttributeConfig provides common config for a particular resource attribute.
type ResourceAttributeConfig struct {
	Enabled bool `mapstructure:"enabled"`
	// Experimental: MetricsInclude defines a list of filters for attribute values.
	// If the list is not empty, only metrics with matching resource attribute values will be emitted.
	MetricsInclude []filter.Config `mapstructure:"metrics_include"`
	// Experimental: MetricsExclude defines a list of filters for attribute values.
	// If the list is not empty, metrics with matching resource attribute values will not be emitted.
	// MetricsInclude has higher priority than MetricsExclude.
	MetricsExclude []filter.Config `mapstructure:"metrics_exclude"`

	enabledSetByUser bool
}

func (rac *ResourceAttributeConfig) Unmarshal(parser *confmap.Conf) error {
	if parser == nil {
		return nil
	}
	err := parser.Unmarshal(rac)
	if err != nil {
		return err
	}
	rac.enabledSetByUser = parser.IsSet("enabled")
	return nil
}

// ResourceAttributesConfig provides config for phpfpm resource attributes.
type ResourceAttributesConfig struct {
	PhpfpmPoolName  ResourceAttributeConfig `mapstructure:"phpfpm.pool_name"`
	PhpfpmScrapeURI ResourceAttributeConfig `mapstructure:"phpfpm.scrape_uri"`
}

func DefaultResourceAttributesConfig() ResourceAttributesConfig {
	return ResourceAttributesConfig{
		PhpfpmPoolName: ResourceAttributeConfig{
			Enabled: true,
		},
		PhpfpmScrapeURI: ResourceAttributeConfig{
			Enabled: true,
		},
	}
}

// MetricsBuilderConfig is a configuration for phpfpm metrics builder.
type MetricsBuilderConfig struct {
	Metrics            MetricsConfig            `mapstructure:"metrics"`
	ResourceAttributes ResourceAttributesConfig `mapstructure:"resource_attributes"`
}

func DefaultMetricsBuilderConfig() MetricsBuilderConfig {
	return MetricsBuilderConfig{
		Metrics:            DefaultMetricsConfig(),
		ResourceAttributes: DefaultResourceAttributesConfig(),
	}
}
