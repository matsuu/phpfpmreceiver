// Code generated by mdatagen. DO NOT EDIT.

package metadata

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"go.opentelemetry.io/collector/pdata/pcommon"
	"go.opentelemetry.io/collector/pdata/pmetric"
	"go.opentelemetry.io/collector/receiver/receivertest"
	"go.uber.org/zap"
	"go.uber.org/zap/zaptest/observer"
)

type testDataSet int

const (
	testDataSetDefault testDataSet = iota
	testDataSetAll
	testDataSetNone
)

func TestMetricsBuilder(t *testing.T) {
	tests := []struct {
		name        string
		metricsSet  testDataSet
		resAttrsSet testDataSet
		expectEmpty bool
	}{
		{
			name: "default",
		},
		{
			name:        "all_set",
			metricsSet:  testDataSetAll,
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "none_set",
			metricsSet:  testDataSetNone,
			resAttrsSet: testDataSetNone,
			expectEmpty: true,
		},
		{
			name:        "filter_set_include",
			resAttrsSet: testDataSetAll,
		},
		{
			name:        "filter_set_exclude",
			resAttrsSet: testDataSetAll,
			expectEmpty: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			start := pcommon.Timestamp(1_000_000_000)
			ts := pcommon.Timestamp(1_000_001_000)
			observedZapCore, observedLogs := observer.New(zap.WarnLevel)
			settings := receivertest.NewNopSettings()
			settings.Logger = zap.New(observedZapCore)
			mb := NewMetricsBuilder(loadMetricsBuilderConfig(t, tt.name), settings, WithStartTime(start))

			expectedWarnings := 0

			assert.Equal(t, expectedWarnings, observedLogs.Len())

			defaultMetricsCount := 0
			allMetricsCount := 0

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmAcceptedConnectionsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmActiveProcessesDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmIdleProcessesDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmListenQueueDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmListenQueueLengthDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmMaxActiveProcessesDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmMaxChildrenReachedDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmMaxListenQueueDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmProcessLastRequestCPUDataPoint(ts, 1, 5)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmProcessLastRequestMemoryDataPoint(ts, 1, 5)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmProcessRequestDurationDataPoint(ts, 1, 5)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmProcessRequestsDataPoint(ts, 1, 5)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmProcessStateDataPoint(ts, 1, 5, "state-val")

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmScrapeFailuresDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmSlowRequestsDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmStartSinceDataPoint(ts, 1)

			defaultMetricsCount++
			allMetricsCount++
			mb.RecordPhpfpmTotalProcessesDataPoint(ts, 1)

			rb := mb.NewResourceBuilder()
			rb.SetPhpfpmPoolName("phpfpm.pool_name-val")
			rb.SetPhpfpmScrapeURI("phpfpm.scrape_uri-val")
			res := rb.Emit()
			metrics := mb.Emit(WithResource(res))

			if tt.expectEmpty {
				assert.Equal(t, 0, metrics.ResourceMetrics().Len())
				return
			}

			assert.Equal(t, 1, metrics.ResourceMetrics().Len())
			rm := metrics.ResourceMetrics().At(0)
			assert.Equal(t, res, rm.Resource())
			assert.Equal(t, 1, rm.ScopeMetrics().Len())
			ms := rm.ScopeMetrics().At(0).Metrics()
			if tt.metricsSet == testDataSetDefault {
				assert.Equal(t, defaultMetricsCount, ms.Len())
			}
			if tt.metricsSet == testDataSetAll {
				assert.Equal(t, allMetricsCount, ms.Len())
			}
			validatedMetrics := make(map[string]bool)
			for i := 0; i < ms.Len(); i++ {
				switch ms.At(i).Name() {
				case "phpfpm.accepted_connections":
					assert.False(t, validatedMetrics["phpfpm.accepted_connections"], "Found a duplicate in the metrics slice: phpfpm.accepted_connections")
					validatedMetrics["phpfpm.accepted_connections"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of requests accepted by the pool", ms.At(i).Description())
					assert.Equal(t, "{connections}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "phpfpm.active_processes":
					assert.False(t, validatedMetrics["phpfpm.active_processes"], "Found a duplicate in the metrics slice: phpfpm.active_processes")
					validatedMetrics["phpfpm.active_processes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The number of active processes", ms.At(i).Description())
					assert.Equal(t, "{processes}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "phpfpm.idle_processes":
					assert.False(t, validatedMetrics["phpfpm.idle_processes"], "Found a duplicate in the metrics slice: phpfpm.idle_processes")
					validatedMetrics["phpfpm.idle_processes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The The number of idle processes", ms.At(i).Description())
					assert.Equal(t, "{processes}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "phpfpm.listen_queue":
					assert.False(t, validatedMetrics["phpfpm.listen_queue"], "Found a duplicate in the metrics slice: phpfpm.listen_queue")
					validatedMetrics["phpfpm.listen_queue"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The number of requests in the queue of pending connections", ms.At(i).Description())
					assert.Equal(t, "{requests}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "phpfpm.listen_queue_length":
					assert.False(t, validatedMetrics["phpfpm.listen_queue_length"], "Found a duplicate in the metrics slice: phpfpm.listen_queue_length")
					validatedMetrics["phpfpm.listen_queue_length"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The size of the socket queue of pending connections", ms.At(i).Description())
					assert.Equal(t, "{requests}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "phpfpm.max_active_processes":
					assert.False(t, validatedMetrics["phpfpm.max_active_processes"], "Found a duplicate in the metrics slice: phpfpm.max_active_processes")
					validatedMetrics["phpfpm.max_active_processes"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The maximum number of requests in the queue of pending connections since FPM has started", ms.At(i).Description())
					assert.Equal(t, "{processes}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "phpfpm.max_children_reached":
					assert.False(t, validatedMetrics["phpfpm.max_children_reached"], "Found a duplicate in the metrics slice: phpfpm.max_children_reached")
					validatedMetrics["phpfpm.max_children_reached"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of times, the process limit has been reached, when pm tries to start more children (works only for pm 'dynamic' and 'ondemand')", ms.At(i).Description())
					assert.Equal(t, "{processes}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "phpfpm.max_listen_queue":
					assert.False(t, validatedMetrics["phpfpm.max_listen_queue"], "Found a duplicate in the metrics slice: phpfpm.max_listen_queue")
					validatedMetrics["phpfpm.max_listen_queue"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The maximum number of requests in the queue of pending connections since FPM has started", ms.At(i).Description())
					assert.Equal(t, "{requests}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "phpfpm.process.last_request_cpu":
					assert.False(t, validatedMetrics["phpfpm.process.last_request_cpu"], "Found a duplicate in the metrics slice: phpfpm.process.last_request_cpu")
					validatedMetrics["phpfpm.process.last_request_cpu"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The %cpu the last request consumed", ms.At(i).Description())
					assert.Equal(t, "%", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeDouble, dp.ValueType())
					assert.InDelta(t, float64(1), dp.DoubleValue(), 0.01)
					attrVal, ok := dp.Attributes().Get("child")
					assert.True(t, ok)
					assert.EqualValues(t, 5, attrVal.Int())
				case "phpfpm.process.last_request_memory":
					assert.False(t, validatedMetrics["phpfpm.process.last_request_memory"], "Found a duplicate in the metrics slice: phpfpm.process.last_request_memory")
					validatedMetrics["phpfpm.process.last_request_memory"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The max amount of memory the last request consumed", ms.At(i).Description())
					assert.Equal(t, "By", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("child")
					assert.True(t, ok)
					assert.EqualValues(t, 5, attrVal.Int())
				case "phpfpm.process.request_duration":
					assert.False(t, validatedMetrics["phpfpm.process.request_duration"], "Found a duplicate in the metrics slice: phpfpm.process.request_duration")
					validatedMetrics["phpfpm.process.request_duration"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The duration in microseconds of the requests", ms.At(i).Description())
					assert.Equal(t, "us", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("child")
					assert.True(t, ok)
					assert.EqualValues(t, 5, attrVal.Int())
				case "phpfpm.process.requests":
					assert.False(t, validatedMetrics["phpfpm.process.requests"], "Found a duplicate in the metrics slice: phpfpm.process.requests")
					validatedMetrics["phpfpm.process.requests"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of requests the process has served", ms.At(i).Description())
					assert.Equal(t, "{requests}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("child")
					assert.True(t, ok)
					assert.EqualValues(t, 5, attrVal.Int())
				case "phpfpm.process.state":
					assert.False(t, validatedMetrics["phpfpm.process.state"], "Found a duplicate in the metrics slice: phpfpm.process.state")
					validatedMetrics["phpfpm.process.state"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The state of the process (Idle, Running, ...)", ms.At(i).Description())
					assert.Equal(t, "{processes}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
					attrVal, ok := dp.Attributes().Get("child")
					assert.True(t, ok)
					assert.EqualValues(t, 5, attrVal.Int())
					attrVal, ok = dp.Attributes().Get("state")
					assert.True(t, ok)
					assert.EqualValues(t, "state-val", attrVal.Str())
				case "phpfpm.scrape_failures":
					assert.False(t, validatedMetrics["phpfpm.scrape_failures"], "Found a duplicate in the metrics slice: phpfpm.scrape_failures")
					validatedMetrics["phpfpm.scrape_failures"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of failures scraping from PHP-FPM", ms.At(i).Description())
					assert.Equal(t, "{requests}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "phpfpm.slow_requests":
					assert.False(t, validatedMetrics["phpfpm.slow_requests"], "Found a duplicate in the metrics slice: phpfpm.slow_requests")
					validatedMetrics["phpfpm.slow_requests"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of requests that exceeded your 'request_slowlog_timeout' value", ms.At(i).Description())
					assert.Equal(t, "{requests}", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "phpfpm.start_since":
					assert.False(t, validatedMetrics["phpfpm.start_since"], "Found a duplicate in the metrics slice: phpfpm.start_since")
					validatedMetrics["phpfpm.start_since"] = true
					assert.Equal(t, pmetric.MetricTypeSum, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Sum().DataPoints().Len())
					assert.Equal(t, "The number of seconds since FPM has started", ms.At(i).Description())
					assert.Equal(t, "s", ms.At(i).Unit())
					assert.True(t, ms.At(i).Sum().IsMonotonic())
					assert.Equal(t, pmetric.AggregationTemporalityCumulative, ms.At(i).Sum().AggregationTemporality())
					dp := ms.At(i).Sum().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				case "phpfpm.total_processes":
					assert.False(t, validatedMetrics["phpfpm.total_processes"], "Found a duplicate in the metrics slice: phpfpm.total_processes")
					validatedMetrics["phpfpm.total_processes"] = true
					assert.Equal(t, pmetric.MetricTypeGauge, ms.At(i).Type())
					assert.Equal(t, 1, ms.At(i).Gauge().DataPoints().Len())
					assert.Equal(t, "The number of idle + active processes", ms.At(i).Description())
					assert.Equal(t, "{processes}", ms.At(i).Unit())
					dp := ms.At(i).Gauge().DataPoints().At(0)
					assert.Equal(t, start, dp.StartTimestamp())
					assert.Equal(t, ts, dp.Timestamp())
					assert.Equal(t, pmetric.NumberDataPointValueTypeInt, dp.ValueType())
					assert.Equal(t, int64(1), dp.IntValue())
				}
			}
		})
	}
}
